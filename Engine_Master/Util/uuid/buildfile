lib{stud-uuid}: {hxx ixx cxx}{uuid} {hxx cxx}{uuid-io} hxx{export version}

lib{stud-uuid}: cxx{uuid-linux}:   include = ($cxx.target.class  == 'linux')
lib{stud-uuid}: cxx{uuid-macos}:   include = ($cxx.target.class  == 'macos')
lib{stud-uuid}: cxx{uuid-windows}: include = ($cxx.target.class  == 'windows')
lib{stud-uuid}: cxx{uuid-freebsd}: include = ($cxx.target.system == 'freebsd')

switch $cxx.target.class, $cxx.target.system
{
  case 'linux'
    cxx.libs += -ldl

  case 'macos'
    cxx.libs += -framework CoreFoundation

  case 'windows', 'mingw32'
    cxx.libs += -lrpcrt4

  case 'windows'
    cxx.libs += rpcrt4.lib
}

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
hxx{version}: in{version} $src_root/manifest
{
  dist  = true
  clean = ($src_root != $out_root)
}

# Build options.
#
cxx.poptions =+ "-I$out_root" "-I$src_root"

obja{*}: cxx.poptions += -DLIBSTUD_UUID_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBSTUD_UUID_SHARED_BUILD

# Export options.
#
lib{stud-uuid}: cxx.export.poptions = "-I$out_root" "-I$src_root"

liba{stud-uuid}: cxx.export.poptions += -DLIBSTUD_UUID_STATIC
libs{stud-uuid}: cxx.export.poptions += -DLIBSTUD_UUID_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{stud-uuid}: bin.lib.version = @"-$version.project_id"
else
  lib{stud-uuid}: bin.lib.version = @"-$version.major.$version.minor"

# Install into the libstud/uuid/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libstud/uuid/
  install.subdirs = true
}
